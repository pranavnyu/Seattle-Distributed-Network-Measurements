"""
<Program Name>
  dnsquery.repy

<Date Created>
  February 20, 2010

<Author(s)>
  Pranav Raj Tyagi
  pt992@nyu.edu

<Major Edits>
  None

<Purpose>
  Implements a function to query a name server for the INTERNET-class A recordof a FQDN
  and replies in a 'tuple'

<Notes>
  Implement a function to query a name server for the INTERNET-class A record of a FQDN, 
  and return the reply in a `tuple`, as Python's `socket.gethostbyname_ex` does.
    
  `dnsquery.gethostbyname_ex(name)`
  Use `dnscommon` to construct the UDP datagram contents, 
  and add code to your function to send the query and receive the reply. 
  Write your code so as to use a global definition, NAME_SERVER_IP="8.8.8.8", 
  which is the server to be queried per default. Compare your results with `dig @8.8.8.8 FQDN`.

  ------------
"""

#imports dnscommon.r2py file from repyv2 library using dylink.r2py
dnscommon = dy_import_module("dnscommon.r2py")
libsocket = dy_import_module("librepysocket.r2py")

NAME_SERVER_IP="@8.8.8.8"

def dns_connection(client_ip,client_port,destip, destport ,dns_query_data):

  converted_packet = dnscommon.convert_packet_to_dictionary(dns_query_data)
    
  sendmessage(desthost, destport, converted_packet, client_ip, client_port)

  packet_dict = {}

  try:
    commhandle = libsocket.recvmess(client_ip, client_port , _message_received)

    packet_dict = _message_received(client_ip, client_port, converted_packet,commhandle)
  finally:
    return  packet_dict

def _message_received(client_ip, client_port, converted_packet, 
                                  commhandle):
  packet_dict = _process_query(client_ip, client_port, converted_packet, 
                                   commhandle)

  if packet_dict != None:
    sendmessage(client_ip, client_port, packet_dict)
  
  return packet_dict


def _process_query(client_ip, client_port, converted_packet, commhandle):

  packet_dict = dnscommon.convert_dictionary_to_packet(converted_packet)
  packet_dict['remote_ip'] = client_ip
  packet_dict['remote_port'] = client_port
  return packet_dict

def gethostbyname_ex(dns_query_data):
  client_ip = getmyip()
  client_port = libsocket.get_messports(client_ip)[0]
  
  destip = gethostbyname(dns_query_data)
  #destip = int(hostip)
  destport = 80

  packet_dict = dns_connection(client_ip,client_port,destip, destport ,dns_query_data)
  answers = packet_dict['answers']['answer_data']
  ans_address = []
  for item in range(answers):
    ans_address.append(item)
  return ans_address

