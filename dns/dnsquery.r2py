"""
<Program Name>
  dnsquery.repy

<Date Created>
  February 20, 2010

<Author(s)>
  Pranav Raj Tyagi
  pt992@nyu.edu

<Major Edits>
  None

<Purpose>
  Implements a function to query a name server for the INTERNET-class A recordof a FQDN
  and replies in a 'tuple'

<Notes>
  Implement a function to query a name server for the INTERNET-class A record of a FQDN, 
  and return the reply in a `tuple`, as Python's `socket.gethostbyname_ex` does.
    
  `dnsquery.gethostbyname_ex(name)`
  Use `dnscommon` to construct the UDP datagram contents, 
  and add code to your function to send the query and receive the reply. 
  Write your code so as to use a global definition, NAME_SERVER_IP="8.8.8.8", 
  which is the server to be queried per default. Compare your results with `dig @8.8.8.8 FQDN`.

  ------------
"""

#imports dnscommon.r2py file from repyv2 library using dylink.r2py
dnscommon = dy_import_module("dnscommon.r2py")

def dns_connection(client_ip,client_port,destip, destport, timeout,dns_packet_data):
  '''

  '''
  conn = dns_open_connection(client_ip,client_port,destip, destport, client_ip, client_port, timeout)
  if conn is True:
    packet_dict = dnscoomon.convert_packet_to_dictionary(dns_packet_data)
    packet_dict['remote_ip'] = client_ip
    packet_dict['remote_port'] = client_port
   	answers = packet_dict['answers']['answer_data']
    ans_address = []
    for item in range(answers):
      ans_address.append(item)
      gethostbyname_ex(ans_address)
    else:
      return False

 		
		
    		
    












