"""
<Program Name>
  dnsquery.repy

<Date Created>
  February 20, 2010

<Author(s)>
  Pranav Raj Tyagi
  pt992@nyu.edu

<Major Edits>
  None

<Purpose>
  Implements a function to query a name server for the INTERNET-class A recordof a FQDN
  and replies in a 'tuple'

<Notes>
  Implement a function to query a name server for the INTERNET-class A record of a FQDN, 
  and return the reply in a `tuple`, as Python's `socket.gethostbyname_ex` does.
    
  `dnsquery.gethostbyname_ex(name)`
  Use `dnscommon` to construct the UDP datagram contents, 
  and add code to your function to send the query and receive the reply. 
  Write your code so as to use a global definition, NAME_SERVER_IP="8.8.8.8", 
  which is the server to be queried per default. Compare your results with `dig @8.8.8.8 FQDN`.

  ------------
"""
#ports used from https://developers.google.com/speed/public-dns/docs/security
#http://www.firewall.cx/networking-topics/protocols/domain-name-system-dns/161-protocols-dns-response.html


#imports dnscommon.r2py file from repyv2 library using dylink.r2py
dnscommon = dy_import_module("dnscommon.r2py")
libsocket = dy_import_module("librepysocket.r2py")

listen_ip = '8.8.8.8'
listen_port = 53
client_ip = getmyip()
client_port = libsocket.get_messports(client_ip)[0]


default_flags = {
                 'communication_id': 'a7',
                 'query_response': False,
                 'operation_code': 0,
                 'authority_advisory': False,
                 'truncation': False,
                 'recursion_desired': True,
                 'recursion_accepted': False,
                 'z': False,
                 'authentic_data': False,
                 'checking_disabled': False,
                 'error_code': 0,
                 'answer_count': 0,
                 'authority_record_count': 0,
                 'additional_record_count': 0,
                 'answers': []
                }

def dns_connection(client_ip,client_port,destip, destport ,questions):

  packet_dict = {}
  response_string = ""

  converted_packet = dnscommon.generate_packet(questions, flags=default_flags)

  udpserversocket = listenformessage(client_ip, client_port)

  sent = sendmessage(destip, destport, converted_packet, client_ip, client_port)

  try:

    remote_ip, remote_port, response_string = udpserversocket.getmessage()
    packet_dict = dnscommon.convert_packet_to_dictionary(response_string)
  except SocketWouldBlockError:
    #https://seattle.poly.edu/wiki/FutureRepyExceptions/SocketWouldBlockError
    pass
  except:
    udpserversocket.close()

  return packet_dict

#create query_data as dictionary and then pass it to dns_connection 
def gethostbyname_ex(dns_query_data):
  
  destip = listen_ip
  destport = listen_port

  #query data needs to create a simple dictionary
  questions = [{'name': dns_query_data , 'type' : 'A', 'class': 'IN'}]

  packet_dict = dns_connection(client_ip,client_port,destip, destport, questions)
  '''
  answers = packet_dict['answers']['answer_data']
  ans_address = []
  for item in range(answers):
    ans_address.append(item)
  return ans_address
  '''
  return packet_dict